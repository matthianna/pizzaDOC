generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemSettings {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime
  createdAt   DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model absences {
  id        String   @id
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  notes     String?
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model availabilities {
  id           String    @id
  userId       String
  weekStart    DateTime
  dayOfWeek    Int
  shiftType    ShiftType
  isAvailable  Boolean   @default(false)
  isAbsentWeek Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStart, dayOfWeek, shiftType])
}

model schedules {
  id        String   @id
  weekStart DateTime @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  shifts    shifts[]
}

model shift_limits {
  id        String    @id
  dayOfWeek Int
  shiftType ShiftType
  role      Role
  minStaff  Int
  maxStaff  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime

  @@unique([dayOfWeek, shiftType, role])
}

model shift_start_time_distributions {
  id          String    @id
  shiftType   ShiftType
  role        Role
  startTime   String
  targetCount Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime

  @@unique([shiftType, role, startTime])
}

model shift_start_time_templates {
  id          String    @id
  shiftType   ShiftType
  role        Role
  startTime   String
  priority    Int       @default(0)
  isActive    Boolean   @default(true)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
}

model shifts {
  id            String          @id
  scheduleId    String
  userId        String
  dayOfWeek     Int
  shiftType     ShiftType
  role          Role
  status        ShiftStatus     @default(ASSIGNED)
  startTime     String
  endTime       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  schedules     schedules       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  users         users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  substitutions substitutions[]
  worked_hours  worked_hours?
}

model substitutions {
  id                                      String             @id
  shiftId                                 String
  requesterId                             String
  substituteId                            String?
  approverId                              String?
  status                                  SubstitutionStatus @default(PENDING)
  requestNote                             String?
  responseNote                            String?
  deadline                                DateTime
  createdAt                               DateTime           @default(now())
  updatedAt                               DateTime
  users_substitutions_approverIdTousers   users?             @relation("substitutions_approverIdTousers", fields: [approverId], references: [id])
  users_substitutions_requesterIdTousers  users              @relation("substitutions_requesterIdTousers", fields: [requesterId], references: [id], onDelete: Cascade)
  shifts                                  shifts             @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  users_substitutions_substituteIdTousers users?             @relation("substitutions_substituteIdTousers", fields: [substituteId], references: [id])
}

model user_roles {
  id     String @id
  userId String
  role   Role
  users  users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model user_transports {
  id        String        @id
  userId    String
  transport TransportType
  users     users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, transport])
}

model users {
  id                                              String            @id
  username                                        String            @unique
  password                                        String
  isFirstLogin                                    Boolean           @default(true)
  isActive                                        Boolean           @default(true)
  primaryRole                                     Role?
  primaryTransport                                TransportType?
  createdAt                                       DateTime          @default(now())
  updatedAt                                       DateTime
  Account                                         Account[]
  Session                                         Session[]
  absences                                        absences[]
  availabilities                                  availabilities[]
  shifts                                          shifts[]
  substitutions_substitutions_approverIdTousers   substitutions[]   @relation("substitutions_approverIdTousers")
  substitutions_substitutions_requesterIdTousers  substitutions[]   @relation("substitutions_requesterIdTousers")
  substitutions_substitutions_substituteIdTousers substitutions[]   @relation("substitutions_substituteIdTousers")
  user_roles                                      user_roles[]
  user_transports                                 user_transports[]
  worked_hours                                    worked_hours[]
}

model worked_hours {
  id              String      @id
  shiftId         String      @unique
  userId          String
  startTime       String
  endTime         String
  totalHours      Float
  status          HoursStatus @default(PENDING)
  rejectionReason String?
  submittedAt     DateTime    @default(now())
  reviewedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  shifts          shifts      @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  users           users       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum HoursStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  FATTORINO
  CUCINA
  SALA
  PIZZAIOLO
}

enum ShiftStatus {
  ASSIGNED
  COMPLETED
  SUBSTITUTION_REQUESTED
  SUBSTITUTED
}

enum ShiftType {
  PRANZO
  CENA
}

enum SubstitutionStatus {
  PENDING
  APPLIED
  APPROVED
  REJECTED
  EXPIRED
}

enum TransportType {
  AUTO
  SCOOTER
}
